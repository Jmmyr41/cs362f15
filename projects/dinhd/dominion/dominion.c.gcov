        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:5
        -:    0:Source is newer than graph
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
      180:   10:int compare(const void* a, const void* b) {
      180:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
      180:   13:  if (*(int*)a < *(int*)b)
       48:   14:    return -1;
      132:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:      int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        6:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:       struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;     
        -:   45:  //set up random number generator
        6:   46:  SelectStream(1);
        6:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        6:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        6:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       66:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      660:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      600:   63:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:      {
    #####:   65:        return -1;
        -:   66:      }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        6:   75:  if (numPlayers == 2)
        -:   76:    {
        6:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        6:   89:  if (numPlayers == 2)
        -:   90:    {
        6:   91:      state->supplyCount[estate] = 8;
        6:   92:      state->supplyCount[duchy] = 8;
        6:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        6:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  104:  state->supplyCount[silver] = 40;
        6:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      126:  108:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  109:    {
      990:  110:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  111:  {
      930:  112:    if (kingdomCards[j] == i)
        -:  113:      {
        -:  114:        //check if card is a 'Victory' Kingdom card
       66:  115:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:    {
        6:  117:      if (numPlayers == 2){ 
        6:  118:        state->supplyCount[i] = 8; 
        -:  119:      }
    #####:  120:      else{ state->supplyCount[i] = 12; }
        -:  121:    }
        -:  122:        else
        -:  123:    {
       54:  124:      state->supplyCount[i] = 10;
        -:  125:    }
       60:  126:        break;
        -:  127:      }
        -:  128:    else    //card is not in the set choosen for the game
        -:  129:      {
      870:  130:        state->supplyCount[i] = -1;
        -:  131:      }
        -:  132:  }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       18:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       12:  142:      state->deckCount[i] = 0;
       48:  143:      for (j = 0; j < 3; j++)
        -:  144:  {
       36:  145:    state->deck[i][j] = estate;
       36:  146:    state->deckCount[i]++;
        -:  147:  }
       96:  148:      for (j = 3; j < 10; j++)
        -:  149:  {
       84:  150:    state->deck[i][j] = copper;
       84:  151:    state->deckCount[i]++;    
        -:  152:  }
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       18:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       12:  158:      if ( shuffle(i, state) < 0 )
        -:  159:  {
    #####:  160:    return -1;
        -:  161:  }
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       18:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       12:  168:      state->handCount[i] = 0;
       12:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //  {
        -:  173:      //    drawCard(i, state);
        -:  174:      //  }
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      168:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      162:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        6:  184:  state->outpostPlayed = 0;
        6:  185:  state->phase = 0;
        6:  186:  state->numActions = 1;
        6:  187:  state->numBuys = 1;
        6:  188:  state->playedCardCount = 0;
        6:  189:  state->whoseTurn = 0;
        6:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       36:  194:  for (it = 0; it < 5; it++){
       30:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        6:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        6:  200:  return 0;
        -:  201:}
        -:  202:
       12:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       12:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       12:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
       12:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      144:  216:  while (state->deckCount[player] > 0) {
      120:  217:    card = floor(Random() * state->deckCount[player]);
      120:  218:    newDeck[newDeckPos] = state->deck[player][card];
      120:  219:    newDeckPos++;
      486:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      366:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      120:  223:    state->deckCount[player]--;
        -:  224:  }
      132:  225:  for (i = 0; i < newDeckPos; i++) {
      120:  226:    state->deck[player][i] = newDeck[i];
      120:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       12:  230:  return 0;
        -:  231:}
        -:  232:
       25:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{ 
        -:  235:  int card;
       25:  236:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
       25:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:  
        -:  244:  //check if player has enough actions
       25:  245:  if ( state->numActions < 1 )
        -:  246:    {
        4:  247:      return -1;
        -:  248:    }
        -:  249:  
        -:  250:  //get card played
       21:  251:  card = handCard(handPos, state);
        -:  252:  
        -:  253:  //check if selected card is an action
       21:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:  
        -:  259:  //play card
       21:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
        7:  262:      return -1;
        -:  263:    }
        -:  264:  
        -:  265:  //reduce number of actions
       14:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
       14:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:  
       14:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
    #####:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    #####:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    #####:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    #####:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    #####:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
       42:  313:int numHandCards(struct gameState *state) {
       42:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
       21:  317:int handCard(int handPos, struct gameState *state) {
       21:  318:  int currentPlayer = whoseTurn(state);
       21:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        3:  322:int supplyCount(int card, struct gameState *state) {
        3:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
       84:  348:int whoseTurn(struct gameState *state) {
       84:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:  
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:  {
    #####:  408:    j++;
        -:  409:  }
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, gardens, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:    // printf ("score after hand: %i \n \n" , score);
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
        -:  440:      // printf ("score after curse: %i \n" , score);
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
        -:  442:      // printf ("score after estate: %i \n" , score);
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
        -:  444:      // printf ("score after duchy: %i \n" , score);
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
        -:  446:      // printf ("score after province: %i \n" , score);
    #####:  447:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        -:  448:      // printf ("score after great_hall: %i \n" , score);
    #####:  449:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, gardens, state) / 10 ); };
        -:  450:      // printf ("score after gardens: %i \n" , score);
        -:  451:    }
        -:  452:
        -:  453:    // printf ("score after discard: %i \n \n" , score);
        -:  454:
        -:  455:  //score from deck
    #####:  456:  for (i = 0; i < state->discardCount[player]; i++)
        -:  457:    {
    #####:  458:      if (state->deck[player][i] == curse) { score = score - 1; };
        -:  459:      // printf ("score after curse: %i \n" , score);
    #####:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
        -:  461:      // printf ("score after estate: %i \n" , score);
    #####:  462:      if (state->deck[player][i] == duchy) { score = score + 3; };
        -:  463:       // printf ("score after duchy: %i \n" , score);
    #####:  464:      if (state->deck[player][i] == province) { score = score + 6; };
        -:  465:      // printf ("score after province: %i \n" , score);
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        -:  467:      // printf ("score after great_hall: %i \n" , score);
    #####:  468:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, gardens, state) / 10 ); };
        -:  469:        // printf ("score after gardens: %i \n" , score);
        -:  470:    }
        -:  471:
    #####:  472:    printf ("score after deck: %i \n \n" , score);
        -:  473:
    #####:  474:  return score;
        -:  475:}
        -:  476:
    #####:  477:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  478:  int i;  
        -:  479:  int j;
        -:  480:  int highScore;
        -:  481:  int currentPlayer;
        -:  482:
        -:  483:  //get score for each player
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:    {
        -:  486:      //set unused player scores to -9999
    #####:  487:      if (i >= state->numPlayers)
        -:  488:  {
    #####:  489:    players[i] = -9999;
        -:  490:  }
        -:  491:      else
        -:  492:  {
    #####:  493:    players[i] = scoreFor (i, state);
        -:  494:  }
        -:  495:    }
        -:  496:
        -:  497:  //find highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if (players[i] > players[j])
        -:  502:  {
    #####:  503:    j = i;
        -:  504:  }
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //add 1 to players who had less turns
    #####:  509:  currentPlayer = whoseTurn(state);
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore && i > currentPlayer )
        -:  513:  {
    #####:  514:    players[i]++;
        -:  515:  }
        -:  516:    }
        -:  517:
        -:  518:  //find new highest score
    #####:  519:  j = 0;
    #####:  520:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  521:    {
    #####:  522:      if ( players[i] > players[j] )
        -:  523:  {
    #####:  524:    j = i;
        -:  525:  }
        -:  526:    }
    #####:  527:  highScore = players[j];
        -:  528:
        -:  529:  //set winners in array to 1 and rest to 0
    #####:  530:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  531:    {
    #####:  532:      if ( players[i] == highScore )
        -:  533:  {
    #####:  534:    players[i] = 1;
        -:  535:  }
        -:  536:      else
        -:  537:  {
    #####:  538:    players[i] = 0;
        -:  539:  }
        -:  540:    }
        -:  541:
    #####:  542:  return 0;
        -:  543:}
        -:  544:
       48:  545:int drawCard(int player, struct gameState *state)
        -:  546:{ int count;
        -:  547:  int deckCounter;
       48:  548:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  549:    
        -:  550:    //Step 1 Shuffle the discard pile back into a deck
        -:  551:    int i;
        -:  552:    //Move discard to deck
    #####:  553:    for (i = 0; i < state->discardCount[player];i++){
    #####:  554:      state->deck[player][i] = state->discard[player][i];
    #####:  555:      state->discard[player][i] = -1;
        -:  556:    }
        -:  557:
    #####:  558:    state->deckCount[player] = state->discardCount[player];
    #####:  559:    state->discardCount[player] = 0;//Reset discard
        -:  560:
        -:  561:    //Shufffle the deck
    #####:  562:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  563:   
    #####:  564:    if (DEBUG){//Debug statements
        -:  565:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  566:    }
        -:  567:    
    #####:  568:    state->discardCount[player] = 0;
        -:  569:
        -:  570:    //Step 2 Draw Card
    #####:  571:    count = state->handCount[player];//Get current player's hand count
        -:  572:    
    #####:  573:    if (DEBUG){//Debug statements
        -:  574:      printf("Current hand count: %d\n", count);
        -:  575:    }
        -:  576:    
    #####:  577:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  578:
    #####:  579:    if (deckCounter == 0)
    #####:  580:      return -1;
        -:  581:
    #####:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  583:    state->deckCount[player]--;
    #####:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
        -:  587:  else{
       48:  588:    int count = state->handCount[player];//Get current hand count for player
        -:  589:    int deckCounter;
       48:  590:    if (DEBUG){//Debug statements
        -:  591:      printf("Current hand count: %d\n", count);
        -:  592:    }
        -:  593:
       48:  594:    deckCounter = state->deckCount[player];//Create holder for the deck count
       48:  595:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       48:  596:    state->deckCount[player]--;
       48:  597:    state->handCount[player]++;//Increment hand count
        -:  598:  }
        -:  599:
       48:  600:  return 0;
        -:  601:}
        -:  602:
       36:  603:int getCost(int cardNumber)
        -:  604:{
       36:  605:  switch( cardNumber ) 
        -:  606:    {
        -:  607:    case curse:
    #####:  608:      return 0;
        -:  609:    case estate:
    #####:  610:      return 2;
        -:  611:    case duchy:
    #####:  612:      return 5;
        -:  613:    case province:
    #####:  614:      return 8;
        -:  615:    case copper:
       12:  616:      return 0;
        -:  617:    case silver:
       12:  618:      return 3;
        -:  619:    case gold:
       12:  620:      return 6;
        -:  621:    case adventurer:
    #####:  622:      return 6;
        -:  623:    case council_room:
    #####:  624:      return 5;
        -:  625:    case feast:
    #####:  626:      return 4;
        -:  627:    case gardens:
    #####:  628:      return 4;
        -:  629:    case mine:
    #####:  630:      return 5;
        -:  631:    case remodel:
    #####:  632:      return 4;
        -:  633:    case smithy:
    #####:  634:      return 4;
        -:  635:    case village:
    #####:  636:      return 3;
        -:  637:    case baron:
    #####:  638:      return 4;
        -:  639:    case great_hall:
    #####:  640:      return 3;
        -:  641:    case minion:
    #####:  642:      return 5;
        -:  643:    case steward:
    #####:  644:      return 3;
        -:  645:    case tribute:
    #####:  646:      return 5;
        -:  647:    case ambassador:
    #####:  648:      return 3;
        -:  649:    case cutpurse:
    #####:  650:      return 4;
        -:  651:    case embargo: 
    #####:  652:      return 2;
        -:  653:    case outpost:
    #####:  654:      return 5;
        -:  655:    case salvager:
    #####:  656:      return 4;
        -:  657:    case sea_hag:
    #####:  658:      return 4;
        -:  659:    case treasure_map:
    #####:  660:      return 4;
        -:  661:    }
        -:  662:  
    #####:  663:  return -1;
        -:  664:}
        -:  665:
       21:  666:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  667:{
        -:  668:  int i;
        -:  669:  int j;
        -:  670:  int k;
        -:  671:  int x;
        -:  672:  int index;
       21:  673:  int currentPlayer = whoseTurn(state);
       21:  674:  int nextPlayer = currentPlayer + 1;
        -:  675:
       21:  676:  int tributeRevealedCards[2] = {-1, -1};
        -:  677:  int temphand[MAX_HAND];// moved above the if statement
       21:  678:  int drawntreasure=0;
        -:  679:  int cardDrawn;
       21:  680:  int z = 0;// this is the counter for the temp hand
       21:  681:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  682:    nextPlayer = 0;
        -:  683:  }
        -:  684:  
        1:  685:int adventurerCard(int currentPlayer, struct gameState *state, int handPos)
        -:  686:{
        -:  687:  //investigate further: there is no discard function for the played card.
        4:  688:  while(drawntreasure<2){
        2:  689:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  690:    shuffle(currentPlayer, state);
        -:  691:  }
        2:  692:  drawCard(currentPlayer, state);
        2:  693:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  694:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  695:    drawntreasure++;
        -:  696:  else{
    #####:  697:    temphand[z]=cardDrawn;
    #####:  698:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  699:    z++;
        -:  700:  }
        -:  701:      }
        3:  702:      while(z>=0){
        1:  703:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:  704:  z=z-1;
        -:  705:      }
        1:  706:      return 0;
        -:  707:}
        -:  708:
        1:  709:int smithyCard(int currentPlayer, struct gameState *state, int handPos)
        -:  710:{
        -:  711:  //+3 Cards
        4:  712:  for (i = 0; i < 3; i++)
        -:  713:  {
        3:  714:    drawCard(currentPlayer, state);
        -:  715:  
        -:  716:      
        -:  717:      //discard card from hand
        3:  718:      discardCard(handPos, currentPlayer, state, 0);
        -:  719:  }
        1:  720:      return 0;
        -:  721:}
        -:  722:
       10:  723:int mineCard(int currentPlayer, struct gameState *state, int handPos, int choice2, int choice1)
        -:  724:{
       10:  725:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  726:
       10:  727:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  728:  {
        -:  729:    // printf("Choice 1 invalid \n");
        1:  730:    return -1;
        -:  731:  }
        -:  732:    
        9:  733:      if (choice2 > treasure_map || choice2 < curse)
        -:  734:  {
        -:  735:    // printf("Choice 2 invalid \n");
    #####:  736:    return -1;
        -:  737:  }
        -:  738:
        9:  739:    printf("difference is %i and %i \n", getCost(state->hand[currentPlayer][choice1]) + 3, getCost(choice2));
        -:  740:
        9:  741:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  742:  {
        -:  743:    // printf("Cannot afford \n");
        6:  744:    return -1;
        -:  745:  }
        -:  746:
        3:  747:      gainCard(choice2, state, 2, currentPlayer);
        -:  748:
        -:  749:      //discard card from hand
        3:  750:      discardCard(handPos, currentPlayer, state, 0);
        -:  751:
        -:  752:      //discard trashed card
        4:  753:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  754:  {
        4:  755:    if (state->hand[currentPlayer][i] == j)
        -:  756:      {
        3:  757:        discardCard(i, currentPlayer, state, 0);      
        3:  758:        break;
        -:  759:      }
        -:  760:  }
        -:  761:      
        3:  762:      return 0;
        -:  763:}
        -:  764:
        4:  765:int minionCard(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -:  766:{
        -:  767:
        -:  768:      //+1 action
        4:  769:      state->numActions++;
        -:  770:      
        -:  771:      //discard card from hand
        4:  772:      discardCard(handPos, currentPlayer, state, 0);
        -:  773:      
        4:  774:      if (choice1)    //+2 coins
        -:  775:  {
        2:  776:    state->coins = state->coins + 2;
        -:  777:  }
        -:  778:      
        2:  779:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  780:  {
        -:  781:    //discard hand
       12:  782:    while(numHandCards(state) > 0)
        -:  783:      {
        8:  784:        discardCard(handPos, currentPlayer, state, 0);
        -:  785:      }
        -:  786:        
        -:  787:    //draw 4
       10:  788:    for (i = 0; i < 4; i++)
        -:  789:      {
        8:  790:        drawCard(currentPlayer, state);
        -:  791:      }
        -:  792:        
        -:  793:    //other players discard hand and redraw if hand size > 4
        6:  794:    for (i = 0; i < state->numPlayers; i++)
        -:  795:      {
        4:  796:        if (i != currentPlayer)
        -:  797:    {
        2:  798:      if ( state->handCount[i] > 4 )
        -:  799:        {
        -:  800:          //discard hand
    #####:  801:          while( state->handCount[i] > 0 )
        -:  802:      {
    #####:  803:        discardCard(handPos, i, state, 1);
        -:  804:      }
        -:  805:              
        -:  806:          //draw 4
    #####:  807:          for (j = 0; j < 4; j++)
        -:  808:      {
    #####:  809:        drawCard(i, state);
        -:  810:      }
        -:  811:        }
        -:  812:    }
        -:  813:      }
        -:  814:        
        -:  815:  }
        4:  816:      return 0;
        -:  817:}
        -:  818:
        5:  819:int villageCard(int currentPlayer, struct gameState *state, int handPos)
        -:  820:{
        -:  821:      //+1 Card
        5:  822:      drawCard(currentPlayer, state);
        -:  823:      
        -:  824:      //+2 Actions
        5:  825:      state->numActions = state->numActions + 2;
        -:  826:      
        -:  827:      //discard played card from hand
        5:  828:      discardCard(handPos, currentPlayer, state, 0);
        5:  829:      return 0;
        -:  830:}
        -:  831:
        -:  832:  //uses switch to select card and perform actions
       21:  833:  switch( card ) 
        -:  834:    {
        -:  835:    case adventurer:
        1:  836:    return adventurerCard(currentPlayer, state, handPos);
        -:  837:      
        -:  838:    case council_room:
        -:  839:      //+4 Cards
    #####:  840:      for (i = 0; i < 4; i++)
        -:  841:  {
    #####:  842:    drawCard(currentPlayer, state);
        -:  843:  }
        -:  844:      
        -:  845:      //+1 Buy
    #####:  846:      state->numBuys++;
        -:  847:      
        -:  848:      //Each other player draws a card
    #####:  849:      for (i = 0; i < state->numPlayers; i++)
        -:  850:  {
    #####:  851:    if ( i != currentPlayer )
        -:  852:      {
    #####:  853:        drawCard(i, state);
        -:  854:      }
        -:  855:  }
        -:  856:      
        -:  857:      //put played card in played card pile
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
        -:  859:      
    #####:  860:      return 0;
        -:  861:      
        -:  862:    case feast:
        -:  863:      //gain card with cost up to 5
        -:  864:      //Backup hand
    #####:  865:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  866:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  867:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  868:      }
        -:  869:      //Backup hand
        -:  870:
        -:  871:      //Update Coins for Buy
    #####:  872:      updateCoins(currentPlayer, state, 5);
    #####:  873:      x = 1;//Condition to loop on
    #####:  874:      while( x == 1) {//Buy one card
    #####:  875:  if (supplyCount(choice1, state) <= 0){
    #####:  876:    if (DEBUG)
        -:  877:      printf("None of that card left, sorry!\n");
        -:  878:
    #####:  879:    if (DEBUG){
        -:  880:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  881:    }
        -:  882:  }
    #####:  883:  else if (state->coins < getCost(choice1)){
    #####:  884:    printf("That card is too expensive!\n");
        -:  885:
    #####:  886:    if (DEBUG){
        -:  887:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  888:    }
        -:  889:  }
        -:  890:  else{
        -:  891:
    #####:  892:    if (DEBUG){
        -:  893:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  894:    }
        -:  895:
    #####:  896:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  897:    x = 0;//No more buying cards
        -:  898:
    #####:  899:    if (DEBUG){
        -:  900:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  901:    }
        -:  902:
        -:  903:  }
        -:  904:      }     
        -:  905:
        -:  906:      //Reset Hand
    #####:  907:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  908:  state->hand[currentPlayer][i] = temphand[i];
    #####:  909:  temphand[i] = -1;
        -:  910:      }
        -:  911:      //Reset Hand
        -:  912:            
    #####:  913:      return 0;
        -:  914:      
        -:  915:    case gardens:
    #####:  916:      return -1;
        -:  917:      
        -:  918:    case mine:
       10:  919:    return mineCard(currentPlayer, state, handPos, choice1, choice2);
        -:  920:
        -:  921:
        -:  922:      
        -:  923:    case remodel:
        -:  924:
        -:  925:
    #####:  926:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  927:
    #####:  928:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  929:  {
    #####:  930:    return -1;
        -:  931:  }
        -:  932:
    #####:  933:      gainCard(choice2, state, 0, currentPlayer);
        -:  934:
        -:  935:      //discard card from hand
    #####:  936:      discardCard(handPos, currentPlayer, state, 0);
        -:  937:
        -:  938:      //discard trashed card
    #####:  939:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  940:  {
    #####:  941:    if (state->hand[currentPlayer][i] == j)
        -:  942:      {
    #####:  943:        discardCard(i, currentPlayer, state, 0);      
    #####:  944:        break;
        -:  945:      }
        -:  946:  }
        -:  947:
        -:  948:
    #####:  949:      return 0;
        -:  950:    
        -:  951:
        -:  952:    case smithy:
        1:  953:    return smithyCard(currentPlayer, state, handPos);
        -:  954:    
        -:  955:    case village:
        5:  956:    return villageCard(currentPlayer, state, handPos);
        -:  957:    
        -:  958:    case baron:
    #####:  959:      state->numBuys++;//Increase buys by 1!
    #####:  960:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  961:  int p = 0;//Iterator for hand!
    #####:  962:  int card_not_discarded = 1;//Flag for discard set!
    #####:  963:  while(card_not_discarded){
    #####:  964:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  965:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  966:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  967:      state->discardCount[currentPlayer]++;
    #####:  968:      for (;p < state->handCount[currentPlayer]; p++){
    #####:  969:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  970:      }
    #####:  971:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  972:      state->handCount[currentPlayer]--;
    #####:  973:      card_not_discarded = 0;//Exit the loop
        -:  974:    }
    #####:  975:    else if (p > state->handCount[currentPlayer]){
    #####:  976:      if(DEBUG) {
        -:  977:        printf("No estate cards in your hand, invalid choice\n");
        -:  978:        printf("Must gain an estate if there are any\n");
        -:  979:      }
    #####:  980:      if (supplyCount(estate, state) > 0){
    #####:  981:        gainCard(estate, state, 0, currentPlayer);
    #####:  982:        state->supplyCount[estate]--;//Decrement estates
    #####:  983:        if (supplyCount(estate, state) == 0){
    #####:  984:    isGameOver(state);
        -:  985:        }
        -:  986:      }
    #####:  987:      card_not_discarded = 0;//Exit the loop
        -:  988:    }
        -:  989:          
        -:  990:    else{
    #####:  991:      p++;//Next card
        -:  992:    }
        -:  993:  }
        -:  994:      }
        -:  995:          
        -:  996:      else{
    #####:  997:  if (supplyCount(estate, state) > 0){
    #####:  998:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  999:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1000:    if (supplyCount(estate, state) == 0){
    #####: 1001:      isGameOver(state);
        -: 1002:    }
        -: 1003:  }
        -: 1004:      }
        -: 1005:      
        -: 1006:      
    #####: 1007:      return 0;
        -: 1008:    
        -: 1009:    case great_hall:
        -: 1010:      //+1 Card
    #####: 1011:      drawCard(currentPlayer, state);
        -: 1012:      
        -: 1013:      //+1 Actions
    #####: 1014:      state->numActions++;
        -: 1015:      
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1018:      return 0;
        -: 1019:    
        -: 1020:    case minion:
        4: 1021:    return minionCard(currentPlayer, state, handPos, choice1, choice2);
        -: 1022:
        -: 1023:
        -: 1024:    case steward:
    #####: 1025:      if (choice1 == 1)
        -: 1026:  {
        -: 1027:    //+2 cards
    #####: 1028:    drawCard(currentPlayer, state);
    #####: 1029:    drawCard(currentPlayer, state);
        -: 1030:  }
    #####: 1031:      else if (choice1 == 2)
        -: 1032:  {
        -: 1033:    //+2 coins
    #####: 1034:    state->coins = state->coins + 2;
        -: 1035:  }
        -: 1036:      else
        -: 1037:  {
        -: 1038:    //trash 2 cards in hand
    #####: 1039:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1040:    discardCard(choice3, currentPlayer, state, 1);
        -: 1041:  }
        -: 1042:      
        -: 1043:      //discard card from hand
    #####: 1044:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1045:      return 0;
        -: 1046:    
        -: 1047:    case tribute:
    #####: 1048:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1049:  if (state->deckCount[nextPlayer] > 0){
    #####: 1050:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:    state->deckCount[nextPlayer]--;
        -: 1052:  }
    #####: 1053:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1054:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1055:    state->discardCount[nextPlayer]--;
        -: 1056:  }
        -: 1057:  else{
        -: 1058:    //No Card to Reveal
    #####: 1059:    if (DEBUG){
        -: 1060:      printf("No cards to reveal\n");
        -: 1061:    }
        -: 1062:  }
        -: 1063:      }
        -: 1064:      
        -: 1065:      else{
    #####: 1066:  if (state->deckCount[nextPlayer] == 0){
    #####: 1067:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1068:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1069:      state->deckCount[nextPlayer]++;
    #####: 1070:      state->discard[nextPlayer][i] = -1;
    #####: 1071:      state->discardCount[nextPlayer]--;
        -: 1072:    }
        -: 1073:          
    #####: 1074:    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1075:  } 
    #####: 1076:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:  state->deckCount[nextPlayer]--;
    #####: 1079:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1080:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:  state->deckCount[nextPlayer]--;
        -: 1082:      }    
        -: 1083:           
    #####: 1084:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1085:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1086:  state->playedCardCount++;
    #####: 1087:  tributeRevealedCards[1] = -1;
        -: 1088:      }
        -: 1089:
    #####: 1090:      for (i = 0; i <= 2; i ++){
    #####: 1091:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1092:    state->coins += 2;
        -: 1093:  }
        -: 1094:        
    #####: 1095:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1096:    drawCard(currentPlayer, state);
    #####: 1097:    drawCard(currentPlayer, state);
        -: 1098:  }
        -: 1099:  else{//Action Card
    #####: 1100:    state->numActions = state->numActions + 2;
        -: 1101:  }
        -: 1102:      }
        -: 1103:      
    #####: 1104:      return 0;
        -: 1105:    
        -: 1106:    case ambassador:
    #####: 1107:      j = 0;    //used to check if player has enough cards to discard
        -: 1108:
    #####: 1109:      if (choice2 > 2 || choice2 < 0)
        -: 1110:  {
    #####: 1111:    return -1;        
        -: 1112:  }
        -: 1113:
    #####: 1114:      if (choice1 == handPos)
        -: 1115:  {
    #####: 1116:    return -1;
        -: 1117:  }
        -: 1118:
    #####: 1119:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1120:  {
    #####: 1121:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1122:      {
    #####: 1123:        j++;
        -: 1124:      }
        -: 1125:  }
    #####: 1126:      if (j < choice2)
        -: 1127:  {
    #####: 1128:    return -1;        
        -: 1129:  }
        -: 1130:
    #####: 1131:      if (DEBUG) 
        -: 1132:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1133:
        -: 1134:      //increase supply count for choosen card by amount being discarded
    #####: 1135:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1136:      
        -: 1137:      //each other player gains a copy of revealed card
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:  {
    #####: 1140:    if (i != currentPlayer)
        -: 1141:      {
    #####: 1142:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1143:      }
        -: 1144:  }
        -: 1145:
        -: 1146:      //discard played card from hand
    #####: 1147:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1148:
        -: 1149:      //trash copies of cards returned to supply
    #####: 1150:      for (j = 0; j < choice2; j++)
        -: 1151:  {
    #####: 1152:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1153:      {
    #####: 1154:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1155:    {
    #####: 1156:      discardCard(i, currentPlayer, state, 1);
    #####: 1157:      break;
        -: 1158:    }
        -: 1159:      }
        -: 1160:  }     
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:    
        -: 1164:    case cutpurse:
        -: 1165:
    #####: 1166:      updateCoins(currentPlayer, state, 2);
    #####: 1167:      for (i = 0; i < state->numPlayers; i++)
        -: 1168:  {
    #####: 1169:    if (i != currentPlayer)
        -: 1170:      {
    #####: 1171:        for (j = 0; j < state->handCount[i]; j++)
        -: 1172:    {
    #####: 1173:      if (state->hand[i][j] == copper)
        -: 1174:        {
    #####: 1175:          discardCard(j, i, state, 0);
    #####: 1176:          break;
        -: 1177:        }
    #####: 1178:      if (j == state->handCount[i])
        -: 1179:        {
    #####: 1180:          for (k = 0; k < state->handCount[i]; k++)
        -: 1181:      {
    #####: 1182:        if (DEBUG)
        -: 1183:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1184:      } 
    #####: 1185:          break;
        -: 1186:        }   
        -: 1187:    }
        -: 1188:          
        -: 1189:      }
        -: 1190:        
        -: 1191:  }       
        -: 1192:
        -: 1193:      //discard played card from hand
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1195:
    #####: 1196:      return 0;
        -: 1197:
        -: 1198:    
        -: 1199:    case embargo: 
        -: 1200:      //+2 Coins
    #####: 1201:      state->coins = state->coins + 2;
        -: 1202:      
        -: 1203:      //see if selected pile is in play
    #####: 1204:      if ( state->supplyCount[choice1] == -1 )
        -: 1205:  {
    #####: 1206:    return -1;
        -: 1207:  }
        -: 1208:      
        -: 1209:      //add embargo token to selected supply pile
    #####: 1210:      state->embargoTokens[choice1]++;
        -: 1211:      
        -: 1212:      //trash card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1214:      return 0;
        -: 1215:    
        -: 1216:    case outpost:
        -: 1217:      //set outpost flag
    #####: 1218:      state->outpostPlayed++;
        -: 1219:      
        -: 1220:      //discard card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1222:      return 0;
        -: 1223:    
        -: 1224:    case salvager:
        -: 1225:      //+1 buy
    #####: 1226:      state->numBuys++;
        -: 1227:      
    #####: 1228:      if (choice1)
        -: 1229:  {
        -: 1230:    //gain coins equal to trashed card
    #####: 1231:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1232:    //trash card
    #####: 1233:    discardCard(choice1, currentPlayer, state, 1);  
        -: 1234:  }
        -: 1235:      
        -: 1236:      //discard card
    #####: 1237:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1238:      return 0;
        -: 1239:    
        -: 1240:    case sea_hag:
    #####: 1241:      for (i = 0; i < state->numPlayers; i++){
    #####: 1242:  if (i != currentPlayer){
    #####: 1243:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1244:    state->discardCount[i]++;
    #####: 1245:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1246:  }
        -: 1247:      }
    #####: 1248:      return 0;
        -: 1249:    
        -: 1250:    case treasure_map:
        -: 1251:      //search hand for another treasure_map
    #####: 1252:      index = -1;
    #####: 1253:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1254:  {
    #####: 1255:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1256:      {
    #####: 1257:        index = i;
    #####: 1258:        break;
        -: 1259:      }
        -: 1260:  }
    #####: 1261:      if (index > -1)
        -: 1262:  {
        -: 1263:    //trash both treasure cards
    #####: 1264:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1265:    discardCard(index, currentPlayer, state, 1);
        -: 1266:
        -: 1267:    //gain 4 Gold cards
    #####: 1268:    for (i = 0; i < 4; i++)
        -: 1269:      {
    #####: 1270:        gainCard(gold, state, 1, currentPlayer);
        -: 1271:      }
        -: 1272:        
        -: 1273:    //return success
    #####: 1274:    return 1;
        -: 1275:  }
        -: 1276:      
        -: 1277:      //no second treasure_map found in hand
    #####: 1278:      return -1;
        -: 1279:    }
        -: 1280:  
    #####: 1281:  return -1;
        -: 1282:}
        -: 1283:
       26: 1284:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1285:{
        -: 1286:  
        -: 1287:  //if card is not trashed, added to Played pile 
       26: 1288:  if (trashFlag < 1)
        -: 1289:    {
        -: 1290:      //add card to played pile
       26: 1291:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       26: 1292:      state->playedCardCount++;
        -: 1293:    }
        -: 1294:  
        -: 1295:  //set played card to -1
       26: 1296:  state->hand[currentPlayer][handPos] = -1;
        -: 1297:  
        -: 1298:  //remove card from player's hand
       26: 1299:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
        4: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
       22: 1304:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1305:    {
        -: 1306:      //reduce number of cards in hand
    #####: 1307:      state->handCount[currentPlayer]--;
        -: 1308:    }
        -: 1309:  else  
        -: 1310:    {
        -: 1311:      //replace discarded card with last card in hand
       22: 1312:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1313:      //set last card to -1
       22: 1314:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1315:      //reduce number of cards in hand
       22: 1316:      state->handCount[currentPlayer]--;
        -: 1317:    }
        -: 1318:  
       26: 1319:  return 0;
        -: 1320:}
        -: 1321:
        3: 1322:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1323:{
        -: 1324:  //Note: supplyPos is enum of choosen card
        -: 1325:  
        -: 1326:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1327:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1328:    {
    #####: 1329:      return -1;
        -: 1330:    }
        -: 1331:  
        -: 1332:  //added card for [whoseTurn] current player:
        -: 1333:  // toFlag = 0 : add to discard
        -: 1334:  // toFlag = 1 : add to deck
        -: 1335:  // toFlag = 2 : add to hand
        -: 1336:
        3: 1337:  if (toFlag == 1)
        -: 1338:    {
    #####: 1339:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1340:      state->deckCount[player]++;
        -: 1341:    }
        3: 1342:  else if (toFlag == 2)
        -: 1343:    {
        3: 1344:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1345:      state->handCount[player]++;
        -: 1346:    }
        -: 1347:  else
        -: 1348:    {
    #####: 1349:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1350:      state->discardCount[player]++;
        -: 1351:    }
        -: 1352:  
        -: 1353:  //decrease number in supply pile
        3: 1354:  state->supplyCount[supplyPos]--;
        -: 1355:   
        3: 1356:  return 0;
        -: 1357:}
        -: 1358:
       20: 1359:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1360:{
        -: 1361:  int i;
        -: 1362:  
        -: 1363:  //reset coin count
       20: 1364:  state->coins = 0;
        -: 1365:
        -: 1366:  //add coins for each Treasure card in player's hand
      115: 1367:  for (i = 0; i < state->handCount[player]; i++)
        -: 1368:    {
       95: 1369:      if (state->hand[player][i] == copper)
        -: 1370:  {
       46: 1371:    state->coins += 1;
        -: 1372:  }
       49: 1373:      else if (state->hand[player][i] == silver)
        -: 1374:  {
        3: 1375:    state->coins += 2;
        -: 1376:  }
       46: 1377:      else if (state->hand[player][i] == gold)
        -: 1378:  {
        5: 1379:    state->coins += 3;
        -: 1380:  } 
        -: 1381:    } 
        -: 1382:
        -: 1383:  //add bonus
       20: 1384:  state->coins += bonus;
        -: 1385:
       20: 1386:  return 0;
        -: 1387:}
        -: 1388:
        -: 1389:
        -: 1390://end of dominion.c
        -: 1391:
