        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
       30:   13:  if (*(int*)a < *(int*)b)
        8:   14:    return -1;
       22:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:      int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:       struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;     
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        1:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       11:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      110:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      100:   63:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:      {
    #####:   65:        return -1;
        -:   66:      }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       21:  108:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  109:    {
      165:  110:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  111:  {
      155:  112:    if (kingdomCards[j] == i)
        -:  113:      {
        -:  114:        //check if card is a 'Victory' Kingdom card
       11:  115:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:    {
        1:  117:      if (numPlayers == 2){ 
        1:  118:        state->supplyCount[i] = 8; 
        -:  119:      }
    #####:  120:      else{ state->supplyCount[i] = 12; }
        -:  121:    }
        -:  122:        else
        -:  123:    {
        9:  124:      state->supplyCount[i] = 10;
        -:  125:    }
       10:  126:        break;
        -:  127:      }
        -:  128:    else    //card is not in the set choosen for the game
        -:  129:      {
      145:  130:        state->supplyCount[i] = -1;
        -:  131:      }
        -:  132:  }
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        3:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
        8:  143:      for (j = 0; j < 3; j++)
        -:  144:  {
        6:  145:    state->deck[i][j] = estate;
        6:  146:    state->deckCount[i]++;
        -:  147:  }
       16:  148:      for (j = 3; j < 10; j++)
        -:  149:  {
       14:  150:    state->deck[i][j] = copper;
       14:  151:    state->deckCount[i]++;    
        -:  152:  }
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        3:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
        -:  159:  {
    #####:  160:    return -1;
        -:  161:  }
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        3:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //  {
        -:  173:      //    drawCard(i, state);
        -:  174:      //  }
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       28:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
        6:  194:  for (it = 0; it < 5; it++){
        5:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        -:  201:}
        -:  202:
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:  while (state->deckCount[player] > 0) {
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
       81:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
       61:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       22:  225:  for (i = 0; i < newDeckPos; i++) {
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        2:  230:  return 0;
        -:  231:}
        -:  232:
        1:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{ 
        -:  235:  int card;
        1:  236:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
        1:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:  
        -:  244:  //check if player has enough actions
        1:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:  
        -:  250:  //get card played
        1:  251:  card = handCard(handPos, state);
        -:  252:  
        -:  253:  //check if selected card is an action
        1:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:  
        -:  259:  //play card
        1:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:  
        -:  265:  //reduce number of actions
        1:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
        1:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:  
        1:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
    #####:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    #####:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    #####:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    #####:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    #####:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
        6:  313:int numHandCards(struct gameState *state) {
        6:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
        1:  317:int handCard(int handPos, struct gameState *state) {
        1:  318:  int currentPlayer = whoseTurn(state);
        1:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
        8:  348:int whoseTurn(struct gameState *state) {
        8:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:  
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:  {
    #####:  408:    j++;
        -:  409:  }
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;  
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:  {
    #####:  471:    players[i] = -9999;
        -:  472:  }
        -:  473:      else
        -:  474:  {
    #####:  475:    players[i] = scoreFor (i, state);
        -:  476:  }
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:  {
    #####:  485:    j = i;
        -:  486:  }
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:  {
    #####:  496:    players[i]++;
        -:  497:  }
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:  {
    #####:  506:    j = i;
        -:  507:  }
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:  {
    #####:  516:    players[i] = 1;
        -:  517:  }
        -:  518:      else
        -:  519:  {
    #####:  520:    players[i] = 0;
        -:  521:  }
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
        8:  527:int drawCard(int player, struct gameState *state)
        -:  528:{ int count;
        -:  529:  int deckCounter;
        8:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
    #####:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
    #####:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
        8:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        8:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
        8:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
        8:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        8:  578:    state->deckCount[player]--;
        8:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
        8:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:  
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        1:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        1:  655:  int currentPlayer = whoseTurn(state);
        1:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        1:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        1:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
        1:  662:  int z = 0;// this is the counter for the temp hand
        1:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
    #####:  667:int adventurerCard(int currentPlayer, struct gameState *state, int handPos)
        -:  668:{
        -:  669:  //investigate further: there is no discard function for the played card.
    #####:  670:  while(drawntreasure<2){
    #####:  671:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  672:    shuffle(currentPlayer, state);
        -:  673:  }
    #####:  674:  drawCard(currentPlayer, state);
    #####:  675:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  677:    drawntreasure++;
        -:  678:  else{
    #####:  679:    temphand[z]=cardDrawn;
    #####:  680:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:    z++;
        -:  682:  }
        -:  683:      }
    #####:  684:      while(z>=0){
    #####:  685:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:  z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:}
        -:  690:
        1:  691:int smithyCard(int currentPlayer, struct gameState *state, int handPos)
        -:  692:{
        -:  693:  //+3 Cards
        4:  694:  for (i = 0; i < 3; i++)
        -:  695:  {
        3:  696:    drawCard(currentPlayer, state);
        -:  697:  
        -:  698:      
        -:  699:      //discard card from hand
        3:  700:      discardCard(handPos, currentPlayer, state, 0);
        -:  701:  }
        1:  702:      return 0;
        -:  703:}
        -:  704:
    #####:  705:int mineCard(int currentPlayer, struct gameState *state, int handPos, int choice2, int choice1)
        -:  706:{
    #####:  707:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  708:
    #####:  709:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  710:  {
    #####:  711:    return -1;
        -:  712:  }
        -:  713:    
    #####:  714:      if (choice2 > treasure_map || choice2 < curse)
        -:  715:  {
    #####:  716:    return -1;
        -:  717:  }
        -:  718:
    #####:  719:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  720:  {
    #####:  721:    return -1;
        -:  722:  }
        -:  723:
    #####:  724:      gainCard(choice2, state, 2, currentPlayer);
        -:  725:
        -:  726:      //discard card from hand
    #####:  727:      discardCard(handPos, currentPlayer, state, 0);
        -:  728:
        -:  729:      //discard trashed card
    #####:  730:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  731:  {
    #####:  732:    if (state->hand[currentPlayer][i] == j)
        -:  733:      {
    #####:  734:        discardCard(i, currentPlayer, state, 0);      
    #####:  735:        break;
        -:  736:      }
        -:  737:  }
        -:  738:      
    #####:  739:      return 0;
        -:  740:}
        -:  741:
    #####:  742:int minionCard(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -:  743:{
        -:  744:
        -:  745:      //+1 action
    #####:  746:      state->numActions++;
        -:  747:      
        -:  748:      //discard card from hand
    #####:  749:      discardCard(handPos, currentPlayer, state, 0);
        -:  750:      
    #####:  751:      if (choice1)    //+2 coins
        -:  752:  {
    #####:  753:    state->coins = state->coins + 2;
        -:  754:  }
        -:  755:      
    #####:  756:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  757:  {
        -:  758:    //discard hand
    #####:  759:    while(numHandCards(state) > 0)
        -:  760:      {
    #####:  761:        discardCard(handPos, currentPlayer, state, 0);
        -:  762:      }
        -:  763:        
        -:  764:    //draw 4
    #####:  765:    for (i = 0; i < 4; i++)
        -:  766:      {
    #####:  767:        drawCard(currentPlayer, state);
        -:  768:      }
        -:  769:        
        -:  770:    //other players discard hand and redraw if hand size > 4
    #####:  771:    for (i = 0; i < state->numPlayers; i++)
        -:  772:      {
    #####:  773:        if (i != currentPlayer)
        -:  774:    {
    #####:  775:      if ( state->handCount[i] > 4 )
        -:  776:        {
        -:  777:          //discard hand
    #####:  778:          while( state->handCount[i] > 0 )
        -:  779:      {
    #####:  780:        discardCard(handPos, i, state, 1);
        -:  781:      }
        -:  782:              
        -:  783:          //draw 4
    #####:  784:          for (j = 0; j < 4; j++)
        -:  785:      {
    #####:  786:        drawCard(i, state);
        -:  787:      }
        -:  788:        }
        -:  789:    }
        -:  790:      }
        -:  791:        
        -:  792:  }
    #####:  793:      return 0;
        -:  794:}
        -:  795:
    #####:  796:int villageCard(int currentPlayer, struct gameState *state, int handPos)
        -:  797:{
        -:  798:      //+1 Card
    #####:  799:      drawCard(currentPlayer, state);
        -:  800:      
        -:  801:      //+2 Actions
    #####:  802:      state->numActions = state->numActions + 2;
        -:  803:      
        -:  804:      //discard played card from hand
    #####:  805:      discardCard(handPos, currentPlayer, state, 0);
    #####:  806:      return 0;
        -:  807:}
        -:  808:
        -:  809:  //uses switch to select card and perform actions
        1:  810:  switch( card ) 
        -:  811:    {
        -:  812:    case adventurer:
    #####:  813:    return adventurerCard(currentPlayer, state, handPos);
        -:  814:      
        -:  815:    case council_room:
        -:  816:      //+4 Cards
    #####:  817:      for (i = 0; i < 4; i++)
        -:  818:  {
    #####:  819:    drawCard(currentPlayer, state);
        -:  820:  }
        -:  821:      
        -:  822:      //+1 Buy
    #####:  823:      state->numBuys++;
        -:  824:      
        -:  825:      //Each other player draws a card
    #####:  826:      for (i = 0; i < state->numPlayers; i++)
        -:  827:  {
    #####:  828:    if ( i != currentPlayer )
        -:  829:      {
    #####:  830:        drawCard(i, state);
        -:  831:      }
        -:  832:  }
        -:  833:      
        -:  834:      //put played card in played card pile
    #####:  835:      discardCard(handPos, currentPlayer, state, 0);
        -:  836:      
    #####:  837:      return 0;
        -:  838:      
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
    #####:  852:  if (supplyCount(choice1, state) <= 0){
    #####:  853:    if (DEBUG)
        -:  854:      printf("None of that card left, sorry!\n");
        -:  855:
    #####:  856:    if (DEBUG){
        -:  857:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:    }
        -:  859:  }
    #####:  860:  else if (state->coins < getCost(choice1)){
    #####:  861:    printf("That card is too expensive!\n");
        -:  862:
    #####:  863:    if (DEBUG){
        -:  864:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:    }
        -:  866:  }
        -:  867:  else{
        -:  868:
    #####:  869:    if (DEBUG){
        -:  870:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:    }
        -:  872:
    #####:  873:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  874:    x = 0;//No more buying cards
        -:  875:
    #####:  876:    if (DEBUG){
        -:  877:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:    }
        -:  879:
        -:  880:  }
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  885:  state->hand[currentPlayer][i] = temphand[i];
    #####:  886:  temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:            
    #####:  890:      return 0;
        -:  891:      
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:      
        -:  895:    case mine:
    #####:  896:    return mineCard(currentPlayer, state, handPos, choice1, choice2);
        -:  897:
        -:  898:
        -:  899:      
        -:  900:    case remodel:
        -:  901:
        -:  902:
    #####:  903:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  904:
    #####:  905:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  906:  {
    #####:  907:    return -1;
        -:  908:  }
        -:  909:
    #####:  910:      gainCard(choice2, state, 0, currentPlayer);
        -:  911:
        -:  912:      //discard card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
        -:  914:
        -:  915:      //discard trashed card
    #####:  916:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  917:  {
    #####:  918:    if (state->hand[currentPlayer][i] == j)
        -:  919:      {
    #####:  920:        discardCard(i, currentPlayer, state, 0);      
    #####:  921:        break;
        -:  922:      }
        -:  923:  }
        -:  924:
        -:  925:
    #####:  926:      return 0;
        -:  927:    
        -:  928:
        -:  929:    case smithy:
        1:  930:    return smithyCard(currentPlayer, state, handPos);
        -:  931:    
        -:  932:    case village:
    #####:  933:    return villageCard(currentPlayer, state, handPos);
        -:  934:    
        -:  935:    case baron:
    #####:  936:      state->numBuys++;//Increase buys by 1!
    #####:  937:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  938:  int p = 0;//Iterator for hand!
    #####:  939:  int card_not_discarded = 1;//Flag for discard set!
    #####:  940:  while(card_not_discarded){
    #####:  941:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  942:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  943:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  944:      state->discardCount[currentPlayer]++;
    #####:  945:      for (;p < state->handCount[currentPlayer]; p++){
    #####:  946:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  947:      }
    #####:  948:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  949:      state->handCount[currentPlayer]--;
    #####:  950:      card_not_discarded = 0;//Exit the loop
        -:  951:    }
    #####:  952:    else if (p > state->handCount[currentPlayer]){
    #####:  953:      if(DEBUG) {
        -:  954:        printf("No estate cards in your hand, invalid choice\n");
        -:  955:        printf("Must gain an estate if there are any\n");
        -:  956:      }
    #####:  957:      if (supplyCount(estate, state) > 0){
    #####:  958:        gainCard(estate, state, 0, currentPlayer);
    #####:  959:        state->supplyCount[estate]--;//Decrement estates
    #####:  960:        if (supplyCount(estate, state) == 0){
    #####:  961:    isGameOver(state);
        -:  962:        }
        -:  963:      }
    #####:  964:      card_not_discarded = 0;//Exit the loop
        -:  965:    }
        -:  966:          
        -:  967:    else{
    #####:  968:      p++;//Next card
        -:  969:    }
        -:  970:  }
        -:  971:      }
        -:  972:          
        -:  973:      else{
    #####:  974:  if (supplyCount(estate, state) > 0){
    #####:  975:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  976:    state->supplyCount[estate]--;//Decrement Estates
    #####:  977:    if (supplyCount(estate, state) == 0){
    #####:  978:      isGameOver(state);
        -:  979:    }
        -:  980:  }
        -:  981:      }
        -:  982:      
        -:  983:      
    #####:  984:      return 0;
        -:  985:    
        -:  986:    case great_hall:
        -:  987:      //+1 Card
    #####:  988:      drawCard(currentPlayer, state);
        -:  989:      
        -:  990:      //+1 Actions
    #####:  991:      state->numActions++;
        -:  992:      
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
    #####:  995:      return 0;
        -:  996:    
        -:  997:    case minion:
    #####:  998:    return minionCard(currentPlayer, state, handPos, choice1, choice2);
        -:  999:
        -: 1000:
        -: 1001:    case steward:
    #####: 1002:      if (choice1 == 1)
        -: 1003:  {
        -: 1004:    //+2 cards
    #####: 1005:    drawCard(currentPlayer, state);
    #####: 1006:    drawCard(currentPlayer, state);
        -: 1007:  }
    #####: 1008:      else if (choice1 == 2)
        -: 1009:  {
        -: 1010:    //+2 coins
    #####: 1011:    state->coins = state->coins + 2;
        -: 1012:  }
        -: 1013:      else
        -: 1014:  {
        -: 1015:    //trash 2 cards in hand
    #####: 1016:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1017:    discardCard(choice3, currentPlayer, state, 1);
        -: 1018:  }
        -: 1019:      
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1022:      return 0;
        -: 1023:    
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1026:  if (state->deckCount[nextPlayer] > 0){
    #####: 1027:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:    state->deckCount[nextPlayer]--;
        -: 1029:  }
    #####: 1030:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1031:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:    state->discardCount[nextPlayer]--;
        -: 1033:  }
        -: 1034:  else{
        -: 1035:    //No Card to Reveal
    #####: 1036:    if (DEBUG){
        -: 1037:      printf("No cards to reveal\n");
        -: 1038:    }
        -: 1039:  }
        -: 1040:      }
        -: 1041:      
        -: 1042:      else{
    #####: 1043:  if (state->deckCount[nextPlayer] == 0){
    #####: 1044:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1045:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:      state->deckCount[nextPlayer]++;
    #####: 1047:      state->discard[nextPlayer][i] = -1;
    #####: 1048:      state->discardCount[nextPlayer]--;
        -: 1049:    }
        -: 1050:          
    #####: 1051:    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1052:  } 
    #####: 1053:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:  state->deckCount[nextPlayer]--;
    #####: 1056:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:  state->deckCount[nextPlayer]--;
        -: 1059:      }    
        -: 1060:           
    #####: 1061:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1062:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:  state->playedCardCount++;
    #####: 1064:  tributeRevealedCards[1] = -1;
        -: 1065:      }
        -: 1066:
    #####: 1067:      for (i = 0; i <= 2; i ++){
    #####: 1068:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1069:    state->coins += 2;
        -: 1070:  }
        -: 1071:        
    #####: 1072:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1073:    drawCard(currentPlayer, state);
    #####: 1074:    drawCard(currentPlayer, state);
        -: 1075:  }
        -: 1076:  else{//Action Card
    #####: 1077:    state->numActions = state->numActions + 2;
        -: 1078:  }
        -: 1079:      }
        -: 1080:      
    #####: 1081:      return 0;
        -: 1082:    
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;    //used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
        -: 1087:  {
    #####: 1088:    return -1;        
        -: 1089:  }
        -: 1090:
    #####: 1091:      if (choice1 == handPos)
        -: 1092:  {
    #####: 1093:    return -1;
        -: 1094:  }
        -: 1095:
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:  {
    #####: 1098:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1099:      {
    #####: 1100:        j++;
        -: 1101:      }
        -: 1102:  }
    #####: 1103:      if (j < choice2)
        -: 1104:  {
    #####: 1105:    return -1;        
        -: 1106:  }
        -: 1107:
    #####: 1108:      if (DEBUG) 
        -: 1109:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:      //increase supply count for choosen card by amount being discarded
    #####: 1112:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:      
        -: 1114:      //each other player gains a copy of revealed card
    #####: 1115:      for (i = 0; i < state->numPlayers; i++)
        -: 1116:  {
    #####: 1117:    if (i != currentPlayer)
        -: 1118:      {
    #####: 1119:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1120:      }
        -: 1121:  }
        -: 1122:
        -: 1123:      //discard played card from hand
    #####: 1124:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1125:
        -: 1126:      //trash copies of cards returned to supply
    #####: 1127:      for (j = 0; j < choice2; j++)
        -: 1128:  {
    #####: 1129:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1130:      {
    #####: 1131:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1132:    {
    #####: 1133:      discardCard(i, currentPlayer, state, 1);
    #####: 1134:      break;
        -: 1135:    }
        -: 1136:      }
        -: 1137:  }     
        -: 1138:
    #####: 1139:      return 0;
        -: 1140:    
        -: 1141:    case cutpurse:
        -: 1142:
    #####: 1143:      updateCoins(currentPlayer, state, 2);
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
        -: 1145:  {
    #####: 1146:    if (i != currentPlayer)
        -: 1147:      {
    #####: 1148:        for (j = 0; j < state->handCount[i]; j++)
        -: 1149:    {
    #####: 1150:      if (state->hand[i][j] == copper)
        -: 1151:        {
    #####: 1152:          discardCard(j, i, state, 0);
    #####: 1153:          break;
        -: 1154:        }
    #####: 1155:      if (j == state->handCount[i])
        -: 1156:        {
    #####: 1157:          for (k = 0; k < state->handCount[i]; k++)
        -: 1158:      {
    #####: 1159:        if (DEBUG)
        -: 1160:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1161:      } 
    #####: 1162:          break;
        -: 1163:        }   
        -: 1164:    }
        -: 1165:          
        -: 1166:      }
        -: 1167:        
        -: 1168:  }       
        -: 1169:
        -: 1170:      //discard played card from hand
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1172:
    #####: 1173:      return 0;
        -: 1174:
        -: 1175:    
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:      
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
        -: 1182:  {
    #####: 1183:    return -1;
        -: 1184:  }
        -: 1185:      
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:      
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1191:      return 0;
        -: 1192:    
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
    #####: 1195:      state->outpostPlayed++;
        -: 1196:      
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:      return 0;
        -: 1200:    
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:      
    #####: 1205:      if (choice1)
        -: 1206:  {
        -: 1207:    //gain coins equal to trashed card
    #####: 1208:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1209:    //trash card
    #####: 1210:    discardCard(choice1, currentPlayer, state, 1);  
        -: 1211:  }
        -: 1212:      
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1215:      return 0;
        -: 1216:    
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
    #####: 1219:  if (i != currentPlayer){
    #####: 1220:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1221:    state->discardCount[i]++;
    #####: 1222:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1223:  }
        -: 1224:      }
    #####: 1225:      return 0;
        -: 1226:    
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1231:  {
    #####: 1232:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1233:      {
    #####: 1234:        index = i;
    #####: 1235:        break;
        -: 1236:      }
        -: 1237:  }
    #####: 1238:      if (index > -1)
        -: 1239:  {
        -: 1240:    //trash both treasure cards
    #####: 1241:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1242:    discardCard(index, currentPlayer, state, 1);
        -: 1243:
        -: 1244:    //gain 4 Gold cards
    #####: 1245:    for (i = 0; i < 4; i++)
        -: 1246:      {
    #####: 1247:        gainCard(gold, state, 1, currentPlayer);
        -: 1248:      }
        -: 1249:        
        -: 1250:    //return success
    #####: 1251:    return 1;
        -: 1252:  }
        -: 1253:      
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
        -: 1256:    }
        -: 1257:  
    #####: 1258:  return -1;
        -: 1259:}
        -: 1260:
        3: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1262:{
        -: 1263:  
        -: 1264:  //if card is not trashed, added to Played pile 
        3: 1265:  if (trashFlag < 1)
        -: 1266:    {
        -: 1267:      //add card to played pile
        3: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1269:      state->playedCardCount++;
        -: 1270:    }
        -: 1271:  
        -: 1272:  //set played card to -1
        3: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:  
        -: 1275:  //remove card from player's hand
        3: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        3: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:  else  
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
        3: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
        3: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
        3: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:  
        3: 1296:  return 0;
        -: 1297:}
        -: 1298:
    #####: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:  
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1304:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:  
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
    #####: 1314:  if (toFlag == 1)
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
        -: 1318:    }
    #####: 1319:  else if (toFlag == 2)
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
    #####: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:  
        -: 1330:  //decrease number in supply pile
    #####: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:   
    #####: 1333:  return 0;
        -: 1334:}
        -: 1335:
        2: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:  
        -: 1340:  //reset coin count
        2: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
       12: 1344:  for (i = 0; i < state->handCount[player]; i++)
        -: 1345:    {
       10: 1346:      if (state->hand[player][i] == copper)
        -: 1347:  {
        5: 1348:    state->coins += 1;
        -: 1349:  }
        5: 1350:      else if (state->hand[player][i] == silver)
        -: 1351:  {
    #####: 1352:    state->coins += 2;
        -: 1353:  }
        5: 1354:      else if (state->hand[player][i] == gold)
        -: 1355:  {
    #####: 1356:    state->coins += 3;
        -: 1357:  } 
        -: 1358:    } 
        -: 1359:
        -: 1360:  //add bonus
        2: 1361:  state->coins += bonus;
        -: 1362:
        2: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
